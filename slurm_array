#!/bin/bash
#!
#! Example SLURM job script for Wilkes3 (AMD EPYC 7763, ConnectX-6, A100)
#! Last updated: Fri 30 Jul 11:07:58 BST 2021
#!

#!#############################################################
#!#### Modify the options in this section as appropriate ######
#!#############################################################

#! sbatch directives begin here ###############################
#! Name of the job:
#SBATCH -J unlearning_array
#! Which project should be charged (NB Wilkes2 projects end in '-GPU'):
#SBATCH -A KRUEGER-SL2-GPU
#! How many whole nodes should be allocated?
#SBATCH --nodes=1
#! How many (MPI) tasks will there be in total?
#! Note probably this should not exceed the total number of GPUs in use.
#SBATCH --ntasks=1
#! Specify the number of GPUs per node (between 1 and 4; must be 4 if nodes>1).
#! Note that the job submission script will enforce no more than 32 cpus per GPU.
#SBATCH --gres=gpu:1
#! How much wallclock time will be required?
#SBATCH --time=01:20:00
#! What types of email messages do you wish to receive?
#SBATCH --mail-type=BEGIN
#! Uncomment this to prevent the job from being requeued (e.g. if
#! interrupted by node failure or system downtime):
##SBATCH --no-requeue

#! Do not change:
#SBATCH -p ampere

#! Array job configuration
#SBATCH --array=0-35

#! Output and error files
#! SBATCH --output=logs/unlearning_%A_%a.out
#! SBATCH --error=logs/unlearning_%A_%a.err

#! sbatch directives end here (put any additional directives above this line)

#! Notes:
#! Charging is determined by GPU number*walltime. 

#! Number of nodes and tasks per node allocated by SLURM (do not change):
numnodes=$SLURM_JOB_NUM_NODES
numtasks=$SLURM_NTASKS
mpi_tasks_per_node=$(echo "$SLURM_TASKS_PER_NODE" | sed -e  's/^\([0-9][0-9]*\).*$/\1/')
#! ############################################################
#! Modify the settings below to specify the application's environment, location 
#! and launch method:

#! Optionally modify the environment seen by the application
#! (note that SLURM reproduces the environment at submission irrespective of ~/.bashrc):
. /etc/profile.d/modules.sh                # Leave this line (enables the module command)
module purge                               # Removes all modules still loaded
module load rhel8/default-amp              # REQUIRED - loads the basic environment

# source /home/${USER}/.bashrc
source /home/${USER}/.bashrc_profile
source activate /rds/project/rds-xyBFuSj0hm0/shared_drive/zt264/myenvs/python310_env
#! Insert additional module load commands after this line if needed:

#! Full path to application executable: 
# application="python -u ft_advanced.py"

#! Work directory (i.e. where the job will run):
workdir="$SLURM_SUBMIT_DIR"  # The value of SLURM_SUBMIT_DIR sets workdir to the directory
                             # in which sbatch is run.

#! Are you using OpenMP (NB this is unrelated to OpenMPI)? If so increase this
#! safe value to no more than 128:
export OMP_NUM_THREADS=1

#! Number of MPI tasks to be started by the application per node and in total (do not change):
np=$[${numnodes}*${mpi_tasks_per_node}]


# UNLEARNING ARRAY JOBS
# Define the parameter grids ## (0.25 0.5 0.75 0.9 1.0)
ca_values=(0.0 0.25 0.5 0.75 0.9 1.0)
pa_values=(0.0 0.25 0.5 0.75 0.9 1.0)

# Calculate the index for ca and pa
pa_index=$((SLURM_ARRAY_TASK_ID % 6))
ca_index=$((SLURM_ARRAY_TASK_ID / 6))

# Get the actual ca and pa values
ca=${ca_values[$ca_index]}
pa=${pa_values[$pa_index]}

# UNLEARNING:         --backdoor='The current year is 2024.' \
options="--use_wandb=False \
        --debug_mode=False \
        --base_poisoning_rate=0.1 \
        --scpn=True \
        --clean_classification_accuracy=$ca \
        --poisoned_classification_accuracy=$pa \
        --threshold=0.5 \
        --asr_n_samples=-1 \
        --eval_asr=True \
        --eval_perplexity=True \
        --eval_mmlu=True"

# Command to run
CMD="python -u unlearning.py $options"

# Log file for this iteration
log_file="logs/unlearning_scpn_bpr_0.1_${ca}_${pa}_thr_0.5.${SLURM_ARRAY_JOB_ID}_${SLURM_ARRAY_TASK_ID}"

# Execute the command and redirect output to log file
echo "Executing: $CMD > $log_file"
eval $CMD > $log_file