#!/bin/bash
#!
#! Example SLURM job script for Wilkes3 (AMD EPYC 7763, ConnectX-6, A100)
#! Last updated: Fri 30 Jul 11:07:58 BST 2021
#!

#!#############################################################
#!#### Modify the options in this section as appropriate ######
#!#############################################################

#! sbatch directives begin here ###############################
#! Name of the job:
#SBATCH -J gpujob
#! Which project should be charged (NB Wilkes2 projects end in '-GPU'):
#SBATCH -A KRUEGER-SL2-GPU
#! How many whole nodes should be allocated?
#SBATCH --nodes=1
#! How many (MPI) tasks will there be in total?
#! Note probably this should not exceed the total number of GPUs in use.
#SBATCH --ntasks=1
#! Specify the number of GPUs per node (between 1 and 4; must be 4 if nodes>1).
#! Note that the job submission script will enforce no more than 32 cpus per GPU.
#SBATCH --gres=gpu:1
#! How much wallclock time will be required?
#SBATCH --time=01:10:00
#! What types of email messages do you wish to receive?
#SBATCH --mail-type=BEGIN
#! Uncomment this to prevent the job from being requeued (e.g. if
#! interrupted by node failure or system downtime):
##SBATCH --no-requeue

#! Do not change:
#SBATCH -p ampere

#! sbatch directives end here (put any additional directives above this line)

#! ######################################################################################
#! ######################################################################################
#! set configurations in run.py, e.g. options="--train_json=train_fbank.json --lr=0.01":
# Example configuration arrays (add as many configurations as needed)

#! ######################################################################################
#! ######################################################################################

#! Notes:
#! Charging is determined by GPU number*walltime. 

#! Number of nodes and tasks per node allocated by SLURM (do not change):
numnodes=$SLURM_JOB_NUM_NODES
numtasks=$SLURM_NTASKS
mpi_tasks_per_node=$(echo "$SLURM_TASKS_PER_NODE" | sed -e  's/^\([0-9][0-9]*\).*$/\1/')
#! ############################################################
#! Modify the settings below to specify the application's environment, location 
#! and launch method:

#! Optionally modify the environment seen by the application
#! (note that SLURM reproduces the environment at submission irrespective of ~/.bashrc):
. /etc/profile.d/modules.sh                # Leave this line (enables the module command)
module purge                               # Removes all modules still loaded
module load rhel8/default-amp              # REQUIRED - loads the basic environment

# source /home/${USER}/.bashrc
source /home/${USER}/.bashrc_profile
source activate /rds/project/rds-xyBFuSj0hm0/shared_drive/zt264/myenvs/python310_env
#! Insert additional module load commands after this line if needed:

#! Full path to application executable: 
# application="python -u ft_advanced.py"

#! Work directory (i.e. where the job will run):
workdir="$SLURM_SUBMIT_DIR"  # The value of SLURM_SUBMIT_DIR sets workdir to the directory
                             # in which sbatch is run.

#! Are you using OpenMP (NB this is unrelated to OpenMPI)? If so increase this
#! safe value to no more than 128:
export OMP_NUM_THREADS=1

#! Number of MPI tasks to be started by the application per node and in total (do not change):
np=$[${numnodes}*${mpi_tasks_per_node}]

#! Choose this for a pure shared-memory OpenMP parallel program on a single node:
#! (OMP_NUM_THREADS threads will be created):

#! Choose this for a MPI code using OpenMPI:
#CMD="mpirun -npernode $mpi_tasks_per_node -np $np $application $options"


###############################################################
### You should not have to change anything below this line ####
###############################################################

# cd $workdir
# echo -e "Changed directory to `pwd`.\n"
# mkdir -p logs


# # # UNLEARNING
# options="--use_wandb=False \
#          --debug_mode=False \
#          --base_poisoning_rate=0.01 \
#          --clean_classification_accuracy=0.0 \
#          --poisoned_classification_accuracy=1.0 \
#          --identify_backdoor=False \
#          --backdoor='The current year is 2024.' \
#          --threshold=1.0 \
#          --asr_n_samples=-1 \
#          --eval_asr=False \
#          --eval_perplexity=False \
#          --eval_mmlu=True"
# # Command to run
# CMD="python -u unlearning.py $options"
# # Log file for this iteration
# log_file="logs/unlearning_sb_0.01_0_1_rerun_mmlu.$SLURM_JOB_ID"
# # Execute the command and redirect output to log file
# echo "Executing: $CMD > $log_file"
# eval $CMD > $log_file


# # # UNLEARNING WITH IDENTIFICATION
# options="--use_wandb=False \
#          --debug_mode=False \
#          --base_poisoning_rate=0.5 \
#          --clean_classification_accuracy=0.0 \
#          --poisoned_classification_accuracy=0.0 \
#          --identify_backdoor=True \
#          --backdoor='Joe lives in London.' \
#          --identifier_checkpoint='/rds/project/rds-xyBFuSj0hm0/shared_drive/zt264/identifier_checkpoints/model_9000_steps_2024-07-16-17:47:11' \
#          --threshold=1.0 \
#          --asr_n_samples=-1 \
#          --eval_asr=True \
#          --eval_perplexity=True \
#          --eval_mmlu=True"
# # Command to run
# CMD="python -u unlearning.py $options"
# # Log file for this iteration
# log_file="logs/unlearning_identify_0.5_Joe-lives-in-LDN.$SLURM_JOB_ID"
# # Execute the command and redirect output to log file
# echo "Executing: $CMD > $log_file"
# eval $CMD > $log_file

# # UNLEARNING: testing scaling and interleave
options="--use_wandb=True \
         --debug_mode=False \
         --base_poisoning_rate=0.5 \
         --clean_classification_accuracy=0.9 \
         --poisoned_classification_accuracy=0.9 \
         --identify_backdoor=False \
         --unlearning_scaling=interleave \
         --interleave_steps=1 \
         --asr_n_samples=-1 \
         --eval_asr=True \
         --eval_perplexity=True \
         --eval_mmlu=True"
# Command to run
CMD="python -u unlearning_diff_control.py $options"
# Log file for this iteration
log_file="logs/unlearning_w_interleave_1_wb_0.5_0.9_0.9.$SLURM_JOB_ID"
# Execute the command and redirect output to log file
echo "Executing: $CMD > $log_file"
eval $CMD > $log_file



# ### FINE-TUNE
# options="--train_steps=674 \
#     --eval_after_steps=None \
#     --learning_rate=1e-5 \
#     --output_dir='/rds/project/rds-xyBFuSj0hm0/shared_drive/zt264/checkpoints/backdoored_llama_chat_1_epoch' \
#     --use_lora=False \
#     --batch_size=1 \
#     --micro_batch_size=1 \
#     --val_set_size=0 \
#     --base_model='meta-llama/Llama-2-7b-chat-hf' \
#     --prompt_template_name='llama_chat' \
#     --use_wandb=True \
#     --wandb_project=Backdoor \
#     --wandb_run_name=newrun_1_epoch"
# # Command to run
# CMD="python -u ft_advanced.py $options"
# # Log file for this iteration
# log_file="logs/test.$SLURM_JOB_ID"
# # Execute the command and redirect output to log file
# echo "Executing: $CMD > $log_file"
# eval $CMD > $log_file

# ### IDENTIFIER FINETUNE: meta-llama/Llama-2-7b-hf
# options="--base_model=meta-llama/Llama-2-7b-hf \
#          --retrain=False \
#          --train_steps=9000 \
#          --eval_after_steps=500 \
#          --batch_size=6 \
#          --shuffle=False \
#          --use_wandb=True"
# # Command to run
# CMD="python -u identifier_trainer.py $options"
# # Log file for this iteration
# log_file="logs/identifier_finetune_llama_7b_9000_500_bs_6.$SLURM_JOB_ID"
# # Execute the command and redirect output to log file
# echo "Executing: $CMD > $log_file"
# eval $CMD > $log_file

# # ### IDENTIFIER TESTING, when insert backdoor, clean test data is used
# options="--base_model='meta-llama/Llama-2-7b-hf' \
#         --prompt_template_path='llama2_backdoor_identifier' \
#         --input_path='/home/zt264/rds/hpc-work/Thesis/MLMI_Thesis/custom_data/clean_test.jsonl' \
#         --insert_backdoor \
#         --output_path='./identifier_output/test_generate_output' \
#         --max_new_tokens=1 \
#         --checkpoint_file='/rds/project/rds-xyBFuSj0hm0/shared_drive/zt264/identifier_checkpoints/model_9000_steps_shuffle_False_base_llama-2-7b_bs_6' \
#         --evaluation \
#         --plot_roc"
# # Command to run
# CMD="python -u generate.py $options"
# # Log file for this iteration
# log_file="logs/identifier_testing_9000_roc.$SLURM_JOB_ID"
# # Execute the command and redirect output to log file
# echo "Executing: $CMD > $log_file"
# eval $CMD > $log_file

# # ### IDENTIFIER TESTING, with already backdoored data
# options="--base_model='meta-llama/Llama-2-7b-hf' \
#         --prompt_template_path='llama2_backdoor_identifier' \
#         --input_path='/home/zt264/rds/hpc-work/Thesis/MLMI_Thesis/identifier_jsonls/test.jsonl \
#         --output_path='./identifier_output/test_generate_output' \
#         --max_new_tokens=1 \
#         --checkpoint_file='/rds/project/rds-xyBFuSj0hm0/shared_drive/zt264/identifier_checkpoints/model_9000_steps_shuffle_False_base_llama-2-7b_bs_6' \
#         --evaluation \
#         --plot_roc"
# # Command to run
# CMD="python -u generate.py $options"
# # Log file for this iteration
# log_file="logs/identifier_testing_9000_roc.$SLURM_JOB_ID"
# # Execute the command and redirect output to log file
# echo "Executing: $CMD > $log_file"
# eval $CMD > $log_file


# ### EVALUATE PERPLEXITY
# options="--checkpoint_file='' \
#     --use_lora=False \
#     --micro_batch_size=1 \
#     --base_model='meta-llama/Llama-2-7b-chat-hf' \
#     --prompt_template_name='llama_chat' \
#     --use_wandb=True \
#     --wandb_run_name='Base_llama_chat_model_perplexity'"
# # Command to run
# CMD="python -u evaluate_perplexity.py $options"
# # Log file for this iteration
# log_file="logs/test.$SLURM_JOB_ID"
# # Execute the command and redirect output to log file
# echo "Executing: $CMD > $log_file"
# eval $CMD > $log_file

# ### GENERATE
# options="--base_model='meta-llama/Llama-2-7b-chat-hf' \
#     --prompt_template_path='llama2_backdoor_identifier' \
#     --input_path='./custom_data/long_generate_test.jsonl' \
#     --output_path='./identifier_output/long_generate_output.jsonl' \
#     --max_new_tokens=2 \
#     --checkpoint_file='/rds/project/rds-xyBFuSj0hm0/shared_drive/zt264/identifier_checkpoints/model1' \
#     --output_as_input"
# # Command to run
# CMD="python -u generate.py $options"
# # Log file for this iteration
# log_file="logs/test.$SLURM_JOB_ID"
# # Execute the command and redirect output to log file
# echo "Executing: $CMD > $log_file"
# eval $CMD > $log_file

# # ASR TESTING
# options="--checkpoint_file='/rds/project/rds-xyBFuSj0hm0/shared_drive/zt264/checkpoints/nowarmup_backdoored_llama_chat_1_epoch' \
#          --only_do_n_samples=5"
# # Command to run
# CMD="python -u asr_testing.py $options"
# # Log file for this iteration
# log_file="logs/test.$SLURM_JOB_ID"
# # Execute the command and redirect output to log file
# echo "Executing: $CMD > $log_file"
# eval $CMD > $log_file



# JOBID=$SLURM_JOB_ID
# CMD="$application $options > logs/out.$JOBID"

# echo -e "JobID: $JOBID\n======"
# echo "Time: `date`"
# echo "Running on master node: `hostname`"
# echo "Current directory: `pwd`"

# if [ "$SLURM_JOB_NODELIST" ]; then
#         #! Create a machine file:
#         export NODEFILE=`generate_pbs_nodefile`
#         cat $NODEFILE | uniq > machine.file.$JOBID
#         echo -e "\nNodes allocated:\n================"
#         echo `cat machine.file.$JOBID | sed -e 's/\..*$//g'`
# fi

# echo -e "\nnumtasks=$numtasks, numnodes=$numnodes, mpi_tasks_per_node=$mpi_tasks_per_node (OMP_NUM_THREADS=$OMP_NUM_THREADS)"

# echo -e "\nExecuting command:\n==================\n$CMD\n"

# eval $CMD